{"version":3,"sources":["firebase/index.js","icons/icon-upload.svg","components/StartUI.tsx","components/UploadUI.tsx","icons/icon-success.svg","App.tsx","index.js"],"names":["app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","fireStorage","getStorage","StartUI","setFileLocalUrl","setFileError","setStage","uploadFile","className","src","iconUpload","alt","id","type","onChange","event","files","target","length","isImage","includes","sizeFits","size","userFile","reader","FileReader","readAsDataURL","onload","result","toString","handlePreview","UploadUI","stage","fileLocalUrl","uploadProgress","classNames","max","value","App","useState","fileError","setUploadProgress","bottomWording","StartUI_withProps","storageRef","ref","name","uploadBytesResumable","on","snapshot","bytesTransferred","totalBytes","progressCalc","Math","round","error","console","log","UploadUI_withProps","iconSuccess","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.71e61f55.chunk.js","sourcesContent":["import { initializeApp } from 'firebase/app';\nimport { getStorage } from 'firebase/storage';\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyAEqIsGRSX-FjvwlVzp2zEG4z2JulxPXZo',\n  authDomain: 'fir-upload-a0015.firebaseapp.com',\n  projectId: 'fir-upload-a0015',\n  storageBucket: 'fir-upload-a0015.appspot.com',\n  messagingSenderId: '840464477647',\n  appId: '1:840464477647:web:6a5710120a6b67154036ba'\n};\n\nexport const app = initializeApp(firebaseConfig);\n\nexport const fireStorage = getStorage(app);\n","export default __webpack_public_path__ + \"static/media/icon-upload.a7df5873.svg\";","import { ChangeEvent, Dispatch, SetStateAction } from 'react';\nimport iconUpload from '../icons/icon-upload.svg';\n\ntype Props = {\n  setFileLocalUrl: Dispatch<SetStateAction<string | undefined>>,\n  setFileError: Dispatch<SetStateAction<boolean>>,\n  setStage: Dispatch<SetStateAction<'start' | 'uploading' | 'uploaded'>>,\n  uploadFile: (userFile: File) => void,\n};\n\nexport const StartUI = ({\n  setFileLocalUrl, setFileError,\n  setStage, uploadFile\n}: Props): JSX.Element => {\n  const handlePreview = (userFile: File) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(userFile);\n\n    reader.onload = () => {\n      setFileLocalUrl(reader.result?.toString());\n    };\n  };\n\n  const onFileChange = (event: ChangeEvent<HTMLInputElement>): void => {\n    const { files } = event.target;\n    const maxSize = 5 * 1e+6;\n\n    if (files?.length) {\n      const isImage = files[0].type.includes('image');\n      const sizeFits = files[0].size <= maxSize;\n\n      if (isImage && sizeFits) {\n        setFileError(false);\n        setStage('uploading');\n        handlePreview(files[0]);\n        uploadFile(files[0]);\n      }\n\n      if (!isImage || !sizeFits) {\n        setFileError(true);\n      }\n    }\n  };\n\n  return (\n    <>\n      <div\n        className=\"upload-area__icon-and-text\"\n      >\n        <div className=\"icon\">\n          <img\n            src={iconUpload}\n            alt=\"icon-upload\"\n            className=\"icon-upload\"\n          />\n        </div>\n\n        <header>\n          <div className=\"text--mid\">\n            Drag & Drop image file to upload or\n            <br />\n            <span className=\"text-select\">select</span>\n            &nbsp;it manually\n          </div>\n        </header>\n      </div>\n      <input\n        id=\"fileInput\"\n        type=\"file\"\n        onChange={onFileChange}\n      />\n    </>\n  );\n};\n","import classNames from 'classnames';\n\ntype Props = {\n  stage: 'start' | 'uploading' | 'uploaded',\n  fileLocalUrl: string | undefined,\n  uploadProgress: number,\n};\n\nexport const UploadUI = ({ stage, fileLocalUrl, uploadProgress }: Props): JSX.Element => (\n  <div className=\"upload-container\">\n    {uploadProgress > 0 && (\n      <img\n        className={classNames(\n          'upload-area__img',\n          { 'upload-area__img--dimmed': stage === 'uploading' },\n        )}\n        src={fileLocalUrl}\n        alt=\"file-local-url\"\n      />\n    )}\n\n    {stage === 'uploading' && (\n      <progress\n        className=\"progress-center\"\n        max=\"100\"\n        value={uploadProgress}\n      >\n        {uploadProgress}\n      </progress>\n    )}\n  </div>\n);\n","export default __webpack_public_path__ + \"static/media/icon-success.bf7f9ad2.svg\";","import classNames from 'classnames';\n\nimport { useState } from 'react';\nimport './App.scss';\n\nimport { ref, uploadBytesResumable } from 'firebase/storage';\nimport { fireStorage } from './firebase';\n\nimport { StartUI } from './components/StartUI';\nimport { UploadUI } from './components/UploadUI';\nimport iconSuccess from './icons/icon-success.svg';\n\nexport const App = (): JSX.Element => {\n  const [fileError, setFileError] = useState<boolean>(false);\n  const [fileLocalUrl, setFileLocalUrl] = useState<string | undefined>('');\n  const [uploadProgress, setUploadProgress] = useState<number>(0);\n  const [stage, setStage] = useState<'start' | 'uploading' | 'uploaded'>('start');\n\n  const uploadFile = (userFile: File) => {\n    if (!userFile) return;\n\n    const storageRef = ref(fireStorage, `/images/${userFile.name}`);\n    const uploadAction = uploadBytesResumable(storageRef, userFile);\n\n    uploadAction.on(\n      'state_changed',\n\n      // progress logic\n      (snapshot) => {\n        const { bytesTransferred, totalBytes } = snapshot;\n        const progressCalc = Math.round(\n          (bytesTransferred / totalBytes) * 100\n        );\n\n        setUploadProgress(progressCalc);\n      },\n\n      // error logic\n      (error) => console.log(error),\n\n      // success logic\n      () => setStage('uploaded')\n    );\n  };\n\n  const bottomWording = () => {\n    switch (stage) {\n      case 'uploading':\n        return \"Don't close this window while the image uploads\";\n      case 'uploaded':\n        return 'Image uploaded successfully';\n      default:\n        return 'Upload your image file, up to 5mb in size';\n    }\n  };\n\n  const bottomText = () => (\n    <div className={classNames(\n      'text--light',\n      'text--small',\n      { 'text--error': fileError }\n    )}\n    >\n      {bottomWording()}\n    </div>\n  );\n\n  const topWording = () => {\n    if (stage === 'uploaded') {\n      return (\n        <div className=\"title--success\">\n          <img\n            src={iconSuccess}\n            alt=\"icon-success\"\n            className=\"icon-success\"\n          />\n          Success\n        </div>\n      );\n    }\n\n    return 'Upload Image';\n  };\n\n  const topText = () => (\n    <div className=\"text--big\">\n      {topWording()}\n    </div>\n  );\n\n  const StartUI_withProps = (\n    <StartUI\n      setFileLocalUrl={setFileLocalUrl}\n      setFileError={setFileError}\n      setStage={setStage}\n      uploadFile={uploadFile}\n    />\n  )\n\n  const UploadUI_withProps = (\n    <UploadUI\n      stage={stage}\n      fileLocalUrl={fileLocalUrl}\n      uploadProgress={uploadProgress}\n    />\n  )\n\n  return (\n    <div className=\"main-container\">\n      {topText()}\n\n      {/* Upload area */}\n      <div\n        className={\n          classNames(\n            'upload-area',\n            { 'upload-area--error': fileError }\n          )\n        }\n      >\n        {stage === 'start'\n          ? StartUI_withProps\n          : UploadUI_withProps}\n      </div>\n\n      {bottomText()}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App.tsx';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}