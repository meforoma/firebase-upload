{"version":3,"sources":["App.tsx","AppStyles.ts","components/DragAndDrop/DragAndDropStyles.ts","icons/icon-upload.svg","components/DragAndDrop/DragAndDrop.tsx","components/Uploading/UploadingStyles.ts","components/Uploading/Uploading.tsx","firebase/index.js","components/Input.tsx","icons/icon-success.svg","index.js"],"names":["Stage","styles","text","big","css","small","light","error","titleSuccess","icon","success","upload","area","main","container","iconAndText","mid","select","DragAndDrop","src","iconUpload","alt","preview","image","dimmed","progressBar","centered","Uploading","stage","fileLocalUrl","uploadProgress","uploading","max","value","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","fireStorage","getStorage","Input","setFileLocalUrl","setFileError","setStage","setUploadProgress","id","type","accept","onChange","event","files","target","length","isImage","includes","sizeFits","size","userFile","reader","FileReader","readAsDataURL","onload","result","toString","handlePreview","storageRef","ref","name","uploadBytesResumable","on","snapshot","bytesTransferred","totalBytes","progressCalc","Math","round","console","log","uploaded","uploadFile","App","useState","fileError","start","iconSuccess","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.559cde22.chunk.js","sourcesContent":["/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport { styles } from './AppStyles'\nimport './App.scss';\n\nimport { Fragment, useState } from 'react';\nimport { DragAndDrop, Uploading, Input } from './components';\nimport iconSuccess from './icons/icon-success.svg';\n\nexport enum Stage {\n  start = 'start',\n  uploading = 'uploading',\n  uploaded = 'uploaded',\n}\n\nexport const App = (): JSX.Element => {\n  const [fileError, setFileError] = useState<boolean>(false);\n  const [fileLocalUrl, setFileLocalUrl] = useState<string | undefined>('');\n  const [uploadProgress, setUploadProgress] = useState<number>(0);\n  const [stage, setStage] = useState<Stage>(Stage.start);\n\n  const bottomText = () => (\n    <div css={[\n      styles.text.light,\n      styles.text.small,\n      fileError && styles.text.error]}\n    >\n      {((stage === Stage.start || fileError) && 'Upload your image file, up to 5mb in size') ||\n        (stage === Stage.uploading &&\n          \"Don't close this window while the image uploads\") ||\n        (stage === Stage.uploaded && (\n          <Fragment>\n            Image uploaded successfully.\n            <br />\n            Upload another one if needed\n          </Fragment>\n        ))}\n    </div>\n  );\n\n  const topText = () => (\n    <div css={styles.text.big}>\n      {stage === Stage.uploaded ? (\n        <div css={styles.text.titleSuccess}>\n          <img\n            src={iconSuccess}\n            alt=\"icon-success\"\n            css={styles.icon.success}\n          />\n          Success\n        </div>\n      ) : (\n        'Upload Image'\n      )}\n    </div>\n  );\n\n  return (\n    <div css={styles.main.container}>\n      {topText()}\n\n      {/* Upload area */}\n      <div css={[styles.upload.area,\n      fileError && styles.upload.error]}\n      >\n        {stage === Stage.start ? (\n          <DragAndDrop />\n        ) : (\n          <Uploading\n            stage={stage}\n            fileLocalUrl={fileLocalUrl}\n            uploadProgress={uploadProgress}\n          />\n        )}\n\n        {stage !== Stage.uploading && (\n          <Input\n            setFileLocalUrl={setFileLocalUrl}\n            setFileError={setFileError}\n            setStage={setStage}\n            setUploadProgress={setUploadProgress}\n          />\n        )}\n      </div>\n\n      {bottomText()}\n    </div>\n  );\n};\n","import { css } from '@emotion/react';\n\nexport const styles = {\n  text: {\n    big: css`\n      font-weight: 500;\n      font-size: 24px;\n      height: 28px;\n    `,\n    small: css`\n      font-weight: 400;\n      font-size: 12px;\n      min-height: 14px;\n    `,\n    light: css`\n      color: rgba(163, 163, 163, 1)\n    `,\n    error: css`\n      color: tomato;\n      font-weight: bolder;\n    `,\n    titleSuccess: css`\n      display: flex;\n      align-items: center;\n      height: 28px;\n      width: 124px;\n    `\n  },\n  icon : {\n    success: css `\n      margin-right: 10px;\n      height: 23px;\n    `\n  },\n  upload: {\n    area: css`\n      position: relative;\n      width: 280px;\n      height: 362px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      flex-direction: column;\n    \n      background: #FAFAFA;\n      border: 1px dashed rgba(0, 0, 0, 0.5);\n      border-radius: 10px;\n    `,\n    error: css`\n      border: 2px dashed tomato;\n    `\n  },\n  main: {\n    container: css`\n      width: 280px;\n      height: 464px;\n      display: flex;\n      flex-direction: column;\n      justify-content: space-between;\n      align-items: center;\n      text-align: center;\n    `\n  }\n};","import { css } from '@emotion/react';\n\nexport const styles = {\n  upload: {\n    iconAndText: css`\n      width: 252px;\n      height: 130px;\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      flex-direction: column;\n    `\n  },\n  icon: {\n    upload: css`\n      height: 79px;\n    `\n  },\n  text: {\n    mid: css`\n      font-weight: 400;\n      font-size: 14px;\n    `,\n    select: css`\n      text-decoration: underline;\n      color: rgba(0, 0, 0, 0.7);\n    `,\n    light: css`\n      color: rgba(163, 163, 163, 1)\n    `,\n  }\n};\n","export default __webpack_public_path__ + \"static/media/icon-upload.a7df5873.svg\";","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport { Fragment } from 'react';\nimport { styles } from './DragAndDropStyles';\nimport iconUpload from '../../icons/icon-upload.svg';\n\nexport const DragAndDrop = (): JSX.Element => (\n  <Fragment>\n    <div css={styles.upload.iconAndText}>\n      <div>\n        <img\n          src={iconUpload}\n          alt=\"icon-upload\"\n          css={styles.icon.upload}\n        />\n      </div>\n\n      <header>\n        <div css={[styles.text.mid, styles.text.light]}>\n          Drag & Drop image file to upload or\n          <br />\n          <span css={styles.text.select}>select</span>\n          &nbsp;it manually\n        </div>\n      </header>\n    </div>\n  </Fragment>\n);\n","import { css } from '@emotion/react';\n\nexport const styles = {\n  upload: {\n    container: css`\n      position: relative;\n      height: 100%;\n      width: 100%;\n    `,\n  },\n  preview: {\n    image: css`\n      height: 100%;\n      width: 100%;\n      object-fit: cover;\n      border-radius: 10px;\n    `,\n    dimmed: css`\n      filter: brightness(50%);\n    `\n  },\n  progressBar: {\n    centered: css`\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n    `\n  }\n};\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport { Stage } from '../../App';\nimport { styles } from './UploadingStyles';\n\ntype Props = {\n  stage: Stage;\n  fileLocalUrl: string | undefined;\n  uploadProgress: number;\n};\n\nexport const Uploading = ({\n  stage,\n  fileLocalUrl,\n  uploadProgress,\n}: Props): JSX.Element => (\n  <div css={styles.upload.container}>\n    {uploadProgress > 0 && (\n      <img\n        css={[\n          styles.preview.image,\n          stage === Stage.uploading\n          && styles.preview.dimmed]}\n        src={fileLocalUrl}\n        alt=\"file-local-url\"\n      />\n    )}\n\n    {stage === Stage.uploading && (\n      <progress\n        css={styles.progressBar.centered}\n        max=\"100\"\n        value={uploadProgress}\n      >\n        {uploadProgress}\n      </progress>\n    )}\n  </div>\n);\n","import { initializeApp } from 'firebase/app';\nimport { getStorage } from 'firebase/storage';\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyAEqIsGRSX-FjvwlVzp2zEG4z2JulxPXZo',\n  authDomain: 'fir-upload-a0015.firebaseapp.com',\n  projectId: 'fir-upload-a0015',\n  storageBucket: 'fir-upload-a0015.appspot.com',\n  messagingSenderId: '840464477647',\n  appId: '1:840464477647:web:6a5710120a6b67154036ba'\n};\n\nexport const app = initializeApp(firebaseConfig);\n\nexport const fireStorage = getStorage(app);\n","import { ChangeEvent, Dispatch, SetStateAction } from 'react';\nimport { Stage } from '../App';\nimport { ref, uploadBytesResumable } from 'firebase/storage';\nimport { fireStorage } from '../firebase';\n\ntype Props = {\n  setFileLocalUrl: Dispatch<SetStateAction<string | undefined>>;\n  setFileError: Dispatch<SetStateAction<boolean>>;\n  setStage: Dispatch<SetStateAction<Stage>>;\n  setUploadProgress: Dispatch<SetStateAction<number>>;\n};\n\nexport const Input = ({\n  setFileLocalUrl,\n  setFileError,\n  setStage,\n  setUploadProgress,\n}: Props): JSX.Element => {\n  const uploadFile = (userFile: File) => {\n    if (!userFile) return;\n\n    const storageRef = ref(fireStorage, `/images/${userFile.name}`);\n    const uploadAction = uploadBytesResumable(storageRef, userFile);\n\n    uploadAction.on(\n      'state_changed',\n\n      // progress logic\n      (snapshot) => {\n        const { bytesTransferred, totalBytes } = snapshot;\n        const progressCalc = Math.round((bytesTransferred / totalBytes) * 100);\n\n        setUploadProgress(progressCalc);\n      },\n\n      // error logic\n      (error) => console.log(error),\n\n      // success logic\n      () => setStage(Stage.uploaded)\n    );\n  };\n\n  const handlePreview = (userFile: File) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(userFile);\n\n    reader.onload = () => {\n      setFileLocalUrl(reader.result?.toString());\n    };\n  };\n\n  const onFileChange = (event: ChangeEvent<HTMLInputElement>): void => {\n    const { files } = event.target;\n    const maxSize = 5_000_000;\n\n    if (files?.length) {\n      const isImage = files[0].type.includes('image');\n      const sizeFits = files[0].size <= maxSize;\n\n      if (isImage && sizeFits) {\n        setFileError(false);\n        setStage(Stage.uploading);\n        handlePreview(files[0]);\n        uploadFile(files[0]);\n      }\n\n      if (!isImage || !sizeFits) {\n        setFileError(true);\n      }\n    }\n  };\n\n  return (\n    <input\n      id='fileInput'\n      type=\"file\"\n      accept=\"image/*\"\n      onChange={onFileChange}\n    />\n  );\n};\n","export default __webpack_public_path__ + \"static/media/icon-success.bf7f9ad2.svg\";","import ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App.tsx';\nimport React from 'react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}